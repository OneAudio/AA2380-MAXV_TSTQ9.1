/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 10000000.0;
	SIMULATION_TIME = 10000000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("count")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 21;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("count[20]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[19]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[18]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[17]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[16]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[15]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[14]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[13]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[12]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("enable")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("rst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1000000;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 5.0;
		}
	}
}

TRANSITION_LIST("count[20]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5898265.0;
		LEVEL 1 FOR 2949120.0;
		LEVEL 0 FOR 1152615.0;
	}
}

TRANSITION_LIST("count[19]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2949145.0;
		LEVEL 1 FOR 2949120.0;
		LEVEL 0 FOR 4101735.0;
	}
}

TRANSITION_LIST("count[18]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1474585.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1474560.0;
			LEVEL 0 FOR 1474560.0;
		}
		LEVEL 1 FOR 1474560.0;
		LEVEL 0 FOR 1152615.0;
	}
}

TRANSITION_LIST("count[17]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 737305.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 737280.0;
			LEVEL 0 FOR 737280.0;
		}
		LEVEL 1 FOR 415335.0;
	}
}

TRANSITION_LIST("count[16]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 368665.0;
		NODE
		{
			REPEAT = 13;
			LEVEL 1 FOR 368640.0;
			LEVEL 0 FOR 368640.0;
		}
		LEVEL 1 FOR 46695.0;
	}
}

TRANSITION_LIST("count[15]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 184345.0;
		NODE
		{
			REPEAT = 26;
			LEVEL 1 FOR 184320.0;
			LEVEL 0 FOR 184320.0;
		}
		LEVEL 1 FOR 184320.0;
		LEVEL 0 FOR 46695.0;
	}
}

TRANSITION_LIST("count[14]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 92185.0;
		NODE
		{
			REPEAT = 53;
			LEVEL 1 FOR 92160.0;
			LEVEL 0 FOR 92160.0;
		}
		LEVEL 1 FOR 92160.0;
		LEVEL 0 FOR 46695.0;
	}
}

TRANSITION_LIST("count[13]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 61465.0;
		NODE
		{
			REPEAT = 107;
			LEVEL 1 FOR 30720.0;
			LEVEL 0 FOR 61440.0;
		}
		LEVEL 1 FOR 30720.0;
		LEVEL 0 FOR 46695.0;
	}
}

TRANSITION_LIST("count[12]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30745.0;
		NODE
		{
			REPEAT = 108;
			LEVEL 1 FOR 30720.0;
			LEVEL 0 FOR 61440.0;
		}
		LEVEL 1 FOR 15975.0;
	}
}

TRANSITION_LIST("count[11]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 15385.0;
		NODE
		{
			REPEAT = 325;
			LEVEL 1 FOR 15360.0;
			LEVEL 0 FOR 15360.0;
		}
		LEVEL 1 FOR 615.0;
	}
}

TRANSITION_LIST("count[10]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 7705.0;
		NODE
		{
			REPEAT = 650;
			LEVEL 1 FOR 7680.0;
			LEVEL 0 FOR 7680.0;
		}
		LEVEL 1 FOR 7680.0;
		LEVEL 0 FOR 615.0;
	}
}

TRANSITION_LIST("count[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 3865.0;
		NODE
		{
			REPEAT = 1301;
			LEVEL 1 FOR 3840.0;
			LEVEL 0 FOR 3840.0;
		}
		LEVEL 1 FOR 3840.0;
		LEVEL 0 FOR 615.0;
	}
}

TRANSITION_LIST("count[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1945.0;
		NODE
		{
			REPEAT = 2603;
			LEVEL 1 FOR 1920.0;
			LEVEL 0 FOR 1920.0;
		}
		LEVEL 1 FOR 1920.0;
		LEVEL 0 FOR 615.0;
	}
}

TRANSITION_LIST("count[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 985.0;
		NODE
		{
			REPEAT = 5207;
			LEVEL 1 FOR 960.0;
			LEVEL 0 FOR 960.0;
		}
		LEVEL 1 FOR 960.0;
		LEVEL 0 FOR 615.0;
	}
}

TRANSITION_LIST("count[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 665.0;
		NODE
		{
			REPEAT = 10415;
			LEVEL 1 FOR 320.0;
			LEVEL 0 FOR 640.0;
		}
		LEVEL 1 FOR 320.0;
		LEVEL 0 FOR 615.0;
	}
}

TRANSITION_LIST("count[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 345.0;
		NODE
		{
			REPEAT = 10416;
			LEVEL 1 FOR 320.0;
			LEVEL 0 FOR 640.0;
		}
		LEVEL 1 FOR 295.0;
	}
}

TRANSITION_LIST("count[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 185.0;
		NODE
		{
			REPEAT = 31249;
			LEVEL 1 FOR 160.0;
			LEVEL 0 FOR 160.0;
		}
		LEVEL 1 FOR 135.0;
	}
}

TRANSITION_LIST("count[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 105.0;
		NODE
		{
			REPEAT = 62499;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 55.0;
	}
}

TRANSITION_LIST("count[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 65.0;
		NODE
		{
			REPEAT = 124999;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 15.0;
	}
}

TRANSITION_LIST("count[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 45.0;
		NODE
		{
			REPEAT = 249998;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 15.0;
	}
}

TRANSITION_LIST("count[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 35.0;
		NODE
		{
			REPEAT = 499998;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
		}
		LEVEL 1 FOR 5.0;
	}
}

TRANSITION_LIST("enable")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 10000000.0;
	}
}

TRANSITION_LIST("rst")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 9999970.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "rst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "enable";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "count";
	EXPAND_STATUS = EXPANDED;
	RADIX = Signed;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
	CHILDREN = 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24;
}

DISPLAY_LINE
{
	CHANNEL = "count[20]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[19]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[18]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[17]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[16]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[15]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[14]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[13]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[12]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "count[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 3;
}

TIME_BAR
{
	TIME = 30450;
	MASTER = FALSE;
}

TIME_BAR
{
	TIME = 92835000;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 499985000;
	MASTER = FALSE;
}

TIME_BAR
{
	TIME = 499995000;
	MASTER = FALSE;
}
;
