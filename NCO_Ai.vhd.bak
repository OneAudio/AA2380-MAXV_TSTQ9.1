--------------------------------------------
-- ON le 24/02/2025  - Made with ChatGPT
-- NCO module, XX bits wide
-- with dither noise input
--
-- Size: 36LE
----------------------------------------------
library IEEE;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity NCO_Ai is
    Port ( 
        clk        : in  std_logic;  -- Horloge 24.576 MHz
        rst        : in  std_logic;  -- Reset asynchrone
        phase_inc  : in  unsigned(9 downto 0);  -- Incrément de phase 10 bits (375Hz à 384kHz)
        dither_in  : in  signed(7 downto 0);  -- Entrée externe du dither (8 bits signés)
        phase_lut  : out unsigned(6 downto 0);  -- Index LUT (7 bits)
        -- test outputs
        dither_ext_test : out signed(19 downto 0);
        phase_acc_test  : out unsigned(19 downto 0)
    );
end NCO_Ai;

architecture Behavioral of NCO_Ai is
    signal phase_acc       : signed(19 downto 0) := (others => '0');  -- Accumulateur de phase 24 bits
    signal dither_ext      : signed(19 downto 0);  -- Dither étendu
    signal phase_with_dith : signed(19 downto 0);  -- Phase avec dither
    signal phase_inc_ext   : signed(19 downto 0);  -- Phase_inc étendu avec échelle

begin

    -- Extension de phase_inc et multiplication par 64 (facteur d'échelle)
    phase_inc_ext <= "000000" & signed(phase_inc) & "0000" ;

    dither_ext    <= resize(dither_in, 20) ;  -- 
    dither_ext_test <= dither_ext;

    -- Accumulateur de phase (avec phase_inc ajusté)
    process(clk, rst)
    begin
        if rst = '1' then
            phase_acc <= (others => '0');
        elsif rising_edge(clk) then
            phase_acc <= phase_acc + phase_inc_ext + dither_ext;  -- Incrément ajusté
            

        end if;
    end process;

    -- phase_with_dith <= phase_acc + dither_ext;        -- Addition avec accumulateur
phase_lut      <= unsigned(phase_acc(19 downto 13));  -- 7 MSB pour index LUT
phase_acc_test <= phase_acc;

end Behavioral;
